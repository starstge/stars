# –ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Telegram Stars —Å –æ–ø–ª–∞—Ç–æ–π TON
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ TON –Ω–∞ –∫–æ—à–µ–ª–µ–∫
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: python-telegram-bot, requests, motor, python-dotenv
# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: Render —Å MongoDB
# –ó–∞–ø—É—Å–∫: python bot.py

import os
from datetime import datetime
import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from motor.motor_asyncio import AsyncIOMotorClient
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 8028944732  # @sacoectasy
OWNER_WALLET = os.getenv("OWNER_WALLET")
TONAPI_KEY = os.getenv("TONAPI_KEY")
MONGODB_URI = os.getenv("MONGODB_URI")
STARS_PER_PURCHASE = 50
TON_PRICE_USD = 0.972  # –¶–µ–Ω–∞ –∑–∞ 50 –∑–≤–µ–∑–¥ –≤ USD
PROFIT_PERCENT_TON = 20  # –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ 20%
REF_BONUS_PERCENT = 30  # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 30%
TON_EXCHANGE_RATE = 8  # –ö—É—Ä—Å: 1 TON = $8 (–∑–∞–≥–ª—É—à–∫–∞)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB
client = AsyncIOMotorClient(MONGODB_URI)
db = client["stars_bot"]
settings_collection = db["settings"]
users_collection = db["users"]
admin_log_collection = db["admin_log"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    settings = await settings_collection.find_one({"_id": "config"})
    if not settings:
        await settings_collection.insert_one({
            "_id": "config",
            "admins": [ADMIN_ID],
            "ref_bonus_percent": REF_BONUS_PERCENT,
            "profit_percent": {"ton": PROFIT_PERCENT_TON},
            "total_stars_sold": 0,
            "total_profit_usd": 0,
            "total_profit_ton": 0
        })

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Telegram Wallet (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞)
def generate_ton_address(user_id, timestamp):
    # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Telegram Wallet API
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è user_id={user_id}, timestamp={timestamp}")
    return f"EQB_FAKE_ADDRESS_{user_id}_{timestamp}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ tonapi.io
def check_ton_payment(address, amount_ton, memo):
    headers = {"Authorization": f"Bearer {TONAPI_KEY}"}
    try:
        response = requests.get(f"https://tonapi.io/v2/transactions?address={address}", headers=headers)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ tonapi.io: {response.status_code} {response.text}")
            return False
        transactions = response.json().get("transactions", [])
        for tx in transactions:
            tx_amount = tx.get("amount", 0) / 1e9  # –ù–∞–Ω–æTON
            tx_comment = tx.get("comment", "")
            if tx_amount >= amount_ton and tx_comment == memo:
                logger.info(f"–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {tx_amount} TON, Memo={memo}")
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        return False

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TON
def send_ton_to_owner(amount_ton):
    # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ tonapi.io –∏–ª–∏ TON SDK
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {amount_ton} TON –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {OWNER_WALLET}")
    return True

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Split.gg
def issue_stars(user_id, username, stars):
    # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≤—ã–¥–∞—á—É –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Split.gg
    logger.info(f"–í—ã–¥–∞—á–∞ {stars} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {user_id})")
    return True

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
async def log_admin_action(admin_id, action):
    await admin_log_collection.insert_one({
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "admin_id": admin_id,
        "action": action
    })

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or f"User{user_id}"
    settings = await settings_collection.find_one({"_id": "config"})

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await users_collection.find_one({"user_id": user_id})
    if not user:
        ref_id = context.args[0][4:] if context.args and context.args[0].startswith("ref_") else None
        if ref_id:
            ref_exists = await users_collection.find_one({"user_id": int(ref_id)})
            ref_id = ref_id if ref_exists else None
        await users_collection.insert_one({
            "user_id": user_id,
            "username": username,
            "stars_bought": 0,
            "ref_bonus_ton": 0,
            "referrals": [],
            "bonus_history": [],
            "referrer_id": ref_id
        })

    keyboard = [
        [
            InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars"),
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info"),
            InlineKeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        ],
        [
            InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", callback_data="reviews"),
            InlineKeyboardButton("üìà –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")
        ]
    ]
    if user_id in settings["admins"]:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Telegram Stars.\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {settings['total_stars_sold']} –∑–≤–µ–∑–¥\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    settings = await settings_collection.find_one({"_id": "config"})
    user_id = query.from_user.id
    username = query.from_user.username or f"User{user_id}"
    callback_data = query.data

    if callback_data == "buy_stars":
        ton_amount = TON_PRICE_USD / TON_EXCHANGE_RATE
        timestamp = int(datetime.now().timestamp())
        address = generate_ton_address(user_id, timestamp)
        memo = f"order_{user_id}_{timestamp}"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ {ton_amount:.4f} TON –∑–∞ {STARS_PER_PURCHASE} –∑–≤–µ–∑–¥:\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"Memo: {memo}\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            reply_markup=reply_markup
        )
        context.user_data.setdefault(user_id, {})["pending_payment"] = {
            "address": address,
            "amount_ton": ton_amount,
            "memo": memo,
            "stars": STARS_PER_PURCHASE
        }

    elif callback_data == "profile":
        user = await users_collection.find_one({"user_id": user_id})
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n"
            f"Username: @{username}\n"
            f"–ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥: {user['stars_bought']}\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {user['ref_bonus_ton']:.4f} TON",
            reply_markup=reply_markup
        )

    elif callback_data == "info":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            f"–ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Telegram Stars.\n"
            f"–¶–µ–Ω–∞: ${TON_PRICE_USD} ({TON_PRICE_USD/TON_EXCHANGE_RATE:.4f} TON) –∑–∞ {STARS_PER_PURCHASE} –∑–≤–µ–∑–¥.\n"
            f"–û–ø–ª–∞—Ç–∞: TON —á–µ—Ä–µ–∑ Telegram Wallet.\n"
            f"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @sacoectasy",
            reply_markup=reply_markup
        )

    elif callback_data == "support":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å @sacoectasy –¥–ª—è –ø–æ–º–æ—â–∏.",
            reply_markup=reply_markup
        )

    elif callback_data == "reviews":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üí¨ –û—Ç–∑—ã–≤—ã\n"
            f"–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ @sacoectasy, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!",
            reply_markup=reply_markup
        )

    elif callback_data == "referrals":
        user = await users_collection.find_one({"user_id": user_id})
        ref_count = len([r for r in user["referrals"] if r["stars_bought"] > 0])
        ref_details = "\n".join(
            [f"- @{r['username']}: {r['stars_bought']} –∑–≤–µ–∑–¥, –±–æ–Ω—É—Å {r['bonus_ton']:.4f} TON"
             for r in user["referrals"]]
        ) if user["referrals"] else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫."
        bonus_history = "\n".join(
            [f"- {h['date']}: @{h['ref_user']} –∫—É–ø–∏–ª {h['stars']} –∑–≤–µ–∑–¥, –±–æ–Ω—É—Å {h['bonus_ton']:.4f} TON"
             for h in user["bonus_history"]]
        ) if user["bonus_history"] else "–ù–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π."
        keyboard = [
            [InlineKeyboardButton("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", switch_inline_query=f"ref_{user_id}")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="request_withdrawal")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìà –†–µ—Ñ–µ—Ä–∞–ª—ã\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"–í–∞—à –±–æ–Ω—É—Å: {user['ref_bonus_ton']:.4f} TON\n"
            f"–î–µ—Ç–∞–ª–∏:\n{ref_details}\n\n"
            f"–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤:\n{bonus_history}\n"
            f"–î–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫: @sacoectasy",
            reply_markup=reply_markup
        )

    elif callback_data == "request_withdrawal":
        user = await users_collection.find_one({"user_id": user_id})
        if user["ref_bonus_ton"] > 0:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ {user['ref_bonus_ton']:.4f} TON (ID: {user_id})"
            )
            await query.edit_message_text(
                "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @sacoectasy. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
        else:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )

    elif callback_data == "admin_panel":
        if user_id not in settings["admins"]:
            return
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å % —Ä–µ—Ñ. –±–æ–Ω—É—Å–æ–≤", callback_data="change_ref_bonus")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å % –ø—Ä–∏–±—ã–ª–∏", callback_data="change_profit")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã", callback_data="change_total_stars")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="change_user_stars")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ. –±–æ–Ω—É—Å—ã", callback_data="change_user_rewards")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—å –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π", callback_data="show_log")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            f"–ê–¥–º–∏–Ω—ã: {len(settings['admins'])}\n"
            f"% —Ä–µ—Ñ. –±–æ–Ω—É—Å–æ–≤: {settings['ref_bonus_percent']}\n"
            f"% –ø—Ä–∏–±—ã–ª–∏ (TON): {settings['profit_percent']['ton']}\n"
            reply_markup=reply_markup
        )

    elif callback_data == "back_to_menu":
        await start(query, context)

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    elif callback_data == "change_ref_bonus":
        context.user_data["admin_action"] = "change_ref_bonus"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π % —Ä–µ—Ñ. –±–æ–Ω—É—Å–æ–≤ (0‚Äì100):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_panel")]])
        )

    elif callback_data == "change_profit":
        context.user_data["admin_action"] = "change_profit"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π % –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è TON (10‚Äì50):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_panel")]])
        )

    elif callback_data == "change_total_stars":
        context.user_data["admin_action"] = "change_total_stars"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_panel")]])
        )

    elif callback_data == "change_user_stars":
        context.user_data["admin_action"] = "change_user_stars"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 100):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_panel")]])
        )

    elif callback_data == "change_user_rewards":
        context.user_data["admin_action"] = "change_user_rewards"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –≤ TON (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 0.1):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_panel")]])
        )

    elif callback_data == "show_stats":
        history = []
        async for user in users_collection.find():
            for h in user["bonus_history"]:
                history.append(
                    f"- {h['date']}: @{user['username']} –∫—É–ø–∏–ª {h['stars']} –∑–≤–µ–∑–¥, –±–æ–Ω—É—Å {h['bonus_ton']:.4f} TON"
                )
        history_text = "\n".join(history) or "–ù–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π."
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"–ü—Ä–æ–¥–∞–Ω–æ –∑–≤–µ–∑–¥: {settings['total_stars_sold']}\n"
            f"–ü—Ä–∏–±—ã–ª—å: ${settings['total_profit_usd']:.2f} / {settings['total_profit_ton']:.2f} TON\n"
            f"–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤:\n{history_text}",
            reply_markup=reply_markup
        )

    elif callback_data == "show_log":
        logs = []
        async for log in admin_log_collection.find():
            logs.append(f"- {log['date']}: –ê–¥–º–∏–Ω {log['admin_id']} {log['action']}")
        logs_text = "\n".join(logs) or "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π."
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìã –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π\n{logs_text}",
            reply_markup=reply_markup
        )

    elif callback_data == "back_to_admin_panel":
        query.data = "admin_panel"
        await button_handler(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    settings = await settings_collection.find_one({"_id": "config"})
    if user_id not in settings["admins"]:
        return
    action = context.user_data.get("admin_action")
    if not action:
        return

    text = update.message.text.strip()
    try:
        if action == "change_ref_bonus":
            percent = float(text)
            if 0 <= percent <= 100:
                await settings_collection.update_one(
                    {"_id": "config"},
                    {"$set": {"ref_bonus_percent": percent}}
                )
                await log_admin_action(user_id, f"–ò–∑–º–µ–Ω–∏–ª % —Ä–µ—Ñ. –±–æ–Ω—É—Å–æ–≤ –Ω–∞ {percent}%")
                await update.message.reply_text("–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100%.")

        elif action == "change_profit":
            percent = float(text)
            if 10 <= percent <= 50:
                await settings_collection.update_one(
                    {"_id": "config"},
                    {"$set": {"profit_percent.ton": percent}}
                )
                await log_admin_action(user_id, f"–ò–∑–º–µ–Ω–∏–ª % –ø—Ä–∏–±—ã–ª–∏ (TON) –Ω–∞ {percent}%")
                await update.message.reply_text("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 10 –¥–æ 50%.")

        elif action == "change_total_stars":
            stars = int(text)
            if stars >= 0:
                await settings_collection.update_one(
                    {"_id": "config"},
                    {"$set": {"total_stars_sold": stars}}
                )
                await log_admin_action(user_id, f"–ò–∑–º–µ–Ω–∏–ª –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ –Ω–∞ {stars}")
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

        elif action == "change_user_stars":
            user_id_str, stars = text.split()
            stars = int(stars)
            user = await users_collection.find_one({"user_id": int(user_id_str)})
            if user and stars >= 0:
                await users_collection.update_one(
                    {"user_id": int(user_id_str)},
                    {"$set": {"stars_bought": stars}}
                )
                await log_admin_action(user_id, f"–ò–∑–º–µ–Ω–∏–ª –∑–≤–µ–∑–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –Ω–∞ {stars}")
                await update.message.reply_text("–ó–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥.")

        elif action == "change_user_rewards":
            user_id_str, ton = text.split()
            ton = float(ton)
            user = await users_collection.find_one({"user_id": int(user_id_str)})
            if user and ton >= 0:
                await users_collection.update_one(
                    {"user_id": int(user_id_str)},
                    {"$set": {"ref_bonus_ton": ton}}
                )
                await log_admin_action(user_id, f"–ò–∑–º–µ–Ω–∏–ª —Ä–µ—Ñ. –±–æ–Ω—É—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –Ω–∞ {ton} TON")
                await update.message.reply_text("–ë–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—É–º–º–∞ TON.")

        context.user_data.pop("admin_action", None)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return
    try:
        new_admin_id = int(context.args[0])
        settings = await settings_collection.find_one({"_id": "config"})
        if new_admin_id not in settings["admins"]:
            await settings_collection.update_one(
                {"_id": "config"},
                {"$push": {"admins": new_admin_id}}
            )
            await log_admin_action(user_id, f"–î–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∞ {new_admin_id}")
            await update.message.reply_text(f"–ê–¥–º–∏–Ω {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /add_admin <ID>")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return
    try:
        admin_id = int(context.args[0])
        settings = await settings_collection.find_one({"_id": "config"})
        if admin_id in settings["admins"] and admin_id != ADMIN_ID:
            await settings_collection.update_one(
                {"_id": "config"},
                {"$pull": {"admins": admin_id}}
            )
            await log_admin_action(user_id, f"–£–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∞ {admin_id}")
            await update.message.reply_text(f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω.")
        else:
            await update.message.reply_text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞.")
    except (IndexError, ValueError):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /remove_admin <ID>")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç
async def check_pending_payments(context: ContextTypes.DEFAULT_TYPE):
    async for user in users_collection.find():
        user_id = user["user_id"]
        if user_id in context.user_data and "pending_payment" in context.user_data[user_id]:
            payment = context.user_data[user_id]["pending_payment"]
            if check_ton_payment(payment["address"], payment["amount_ton"], payment["memo"]):
                stars = payment["stars"]
                amount_ton = payment["amount_ton"]
                if send_ton_to_owner(amount_ton):
                    if issue_stars(user_id, user["username"], stars):
                        await users_collection.update_one(
                            {"user_id": user_id},
                            {"$inc": {"stars_bought": stars}}
                        )
                        settings = await settings_collection.find_one({"_id": "config"})
                        profit_usd = (stars / STARS_PER_PURCHASE) * 0.162
                        profit_ton = profit_usd / TON_EXCHANGE_RATE
                        await settings_collection.update_one(
                            {"_id": "config"},
                            {
                                "$inc": {
                                    "total_stars_sold": stars,
                                    "total_profit_usd": profit_usd,
                                    "total_profit_ton": profit_ton
                                }
                            }
                        )
                        if user["referrer_id"]:
                            ref_user = await users_collection.find_one({"user_id": int(user["referrer_id"])})
                            if ref_user:
                                ref_bonus_usd = profit_usd * (settings["ref_bonus_percent"] / 100)
                                ref_bonus_ton = ref_bonus_usd / TON_EXCHANGE_RATE
                                await users_collection.update_one(
                                    {"user_id": int(user["referrer_id"])},
                                    {
                                        "$inc": {"ref_bonus_ton": ref_bonus_ton},
                                        "$push": {
                                            "referrals": {
                                                "user_id": str(user_id),
                                                "username": user["username"],
                                                "stars_bought": stars,
                                                "bonus_ton": ref_bonus_ton
                                            },
                                            "bonus_history": {
                                                "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                                "ref_user": user["username"],
                                                "stars": stars,
                                                "bonus_ton": ref_bonus_ton
                                            }
                                        }
                                    }
                                )
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {stars} –∑–≤–µ–∑–¥."
                        )
                        context.user_data[user_id].pop("pending_payment")
                    else:
                        await context.bot.send_message(
                            chat_id=ADMIN_ID,
                            text=f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user['username']} (ID: {user_id})"
                        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await init_db()
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_admin", add_admin))
    application.add_handler(CommandHandler("remove_admin", remove_admin))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    application.job_queue.run_repeating(check_pending_payments, interval=30)

    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
